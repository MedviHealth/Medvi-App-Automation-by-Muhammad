name: MEDVi App Automation CI/CD

on:
  schedule:
    - cron: "0 * * * *"  # Run every hour
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest

      - name: 🎭 Install Playwright Browsers
        run: |
          playwright install chromium
          playwright install-deps chromium

      - name: ⚙️ Install Allure CLI
        run: npm install -g allure-commandline --save-dev

      - name: 📁 Prepare Directories
        run: |
          rm -rf allure-results allure-report screenshots reports || true
          mkdir -p allure-results allure-report screenshots reports

      - name: 🧪 Run Tests with Allure
        run: |
          echo "🚀 Running tests..."
          pytest \
            --alluredir=allure-results \
            --clean-alluredir \
            --junitxml=reports/junit.xml \
            --html=reports/report.html \
            --self-contained-html \
            -v --tb=long --maxfail=1 --capture=no --log-cli-level=INFO

      - name: 📊 Generate Allure Report (Local)
        if: always()
        run: |
          echo "📊 Generating Allure HTML report..."
          allure generate allure-results --clean -o allure-report || echo "⚠️ Allure generation failed"

      - name: 📤 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            allure-results/
            allure-report/
            screenshots/
            reports/
          retention-days: 7

  publish-report:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Test Artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: _artifacts

      - name: ⚙️ Install Allure CLI
        run: npm install -g allure-commandline --save-dev

      - name: 📊 Generate Allure Report (Final for Pages)
        run: |
          allure generate _artifacts/allure-results --clean -o allure-report
          cp -r _artifacts/screenshots allure-report/ || true
          cp -r _artifacts/reports allure-report/ || true
          echo "✅ Allure report generated for Pages."

      - name: 🌐 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: success() || failure()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages

  cleanup:
    name: 🧹 Cleanup Old Runs & Artifacts
    runs-on: ubuntu-latest
    if: always()
    schedule:
      - cron: "0 3 * * *"  # every day at 3 AM UTC
    steps:
      - name: 🧼 Delete old workflow runs and artifacts
        uses: MajorScruffy/delete-old-workflow-runs@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          days_old: 2
          keep_minimum_runs: 10
